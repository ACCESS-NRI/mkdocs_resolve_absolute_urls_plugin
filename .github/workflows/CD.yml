name: CD

on:
    push:
      tags:
        - '**'
env:
  RELEASE_TAG_REGEX: ^[0-9]+\.[0-9]+\.[0-9]+$

jobs:
  check-release-tag:
    name: Check release tag
    runs-on: ubuntu-latest
    outputs:
        is_release_tag: ${{ steps.check-tag.outputs.is_release_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check tag
        id: check-tag
        run: |
          is_release_tag=true
          tag='${{ github.ref_name }}'
          if [[ ! "$tag" =~ ${{ env.RELEASE_TAG_REGEX }} ]]; then
            echo "::warning::The tag '$tag' was not recognised as a release tag (MAJOR.MINOR.PATCH format). Therefore, no release was created."
            is_release_tag=false
          fi
          echo "is_release_tag=$is_release_tag" >> $GITHUB_OUTPUT
    
  version-sanity-check:
    name: Version sanity check
    needs: [check-release-tag]
    if: ${{ needs.check-release-tag.outputs.is_release_tag == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-tags: true

      - name: Version sanity check
        run: |
          # Don't allow smaller new versions or jumping versions in the MAJOR.MINOR.PATCH format
          old_tag_name=$(git tag --list --sort=-version:refname | grep -E '${{ env.RELEASE_TAG_REGEX }}' | sed -n '2p')
          if [ -z "$old_tag_name" ]; then
            echo "No previous version found. Skipping version sanity check."
            exit 0
          fi
          new_tag_name='${{ github.ref_name }}'
          read -r old_major old_minor old_patch <<< $(echo $old_tag_name | tr '.' ' ')
          read -r new_major new_minor new_patch <<< $(echo $new_tag_name | tr '.' ' ')
          error_msg="Version tag inconsistent!\nVersion '$new_tag_name' cannot come after version '$new_tag_name' (latest released version)."
          # Check MAJOR
          # - New major version cannot be smaller than previous 
          # - Major version can only be incremented by 1 at a time
          if (( new_major < old_major || new_major > old_major + 1 )); then
            echo -e "$msg"
            exit 1
          fi
          # Check MINOR
          # - New minor version cannot be smaller than previous if major version is same
          # - New minor version can only be 0 if major version is incremented
          # - New minor version can only be incremented by 1 at a time
          if (( (new_major == old_major && new_minor < old_minor) || (new_major > old_major && new_minor != 0) || (new_minor > old_minor + 1) )); then
            echo -e "$msg"
            exit 1
          fi
          # Check PATCH
          # - New patch version must be bigger than previous if minor version is same
          # - New patch version can only be 0 if minor version is incremented
          # - New patch version can only be incremented by 1 at a time
          if (( (new_minor == old_minor && new_patch <= old_patch) || (new_minor > old_minor && new_patch != 0) || (new_patch > old_patch + 1) )); then
            echo -e "$msg"
            exit 1
          fi

  get-package-name:
    name: Get package name
    needs: [check-release-tag]
    if: ${{ needs.check-release-tag.outputs.is_release_tag == 'true' }}
    runs-on: ubuntu-latest
    outputs:
        package-name: ${{ steps.get-package-name.outputs.package-name }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Get name
        id: get-package-name
        run: |
          echo "package-name=$(yq '.project.name' pyproject.toml)" >> $GITHUB_OUTPUT

#   pypi:
#     name: build and deploy to PyPI
#     if: github.repository == 'ACCESS-NRI/mkdocs_resolve_absolute_urls_plugin'
#     runs-on: "ubuntu-latest"
#     permissions:
#       id-token: write

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: 3.11.*

#       - name: Install build dependencies
#         run: python -m pip install --upgrade build twine

#       - name: Build distributions
#         shell: bash -l {0}
#         run: |
#           git clean -xdf
#           pyproject-build

#       - name: Publish package to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1

  cleanup-tag-on-failure:
    name: Cleanup tag
    needs: [check-release-tag, version-sanity-check, get-package-name]
    # Run this job if the tag is a release tag and any of the previous jobs failed (and don't skip if any of the needed jobs is skipped)
    if: ${{ ( always() && failure() && ( needs.check-release-tag.result != 'success' || needs.check-release-tag.outputs.is_release_tag == 'true') ) || cancelled() }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete tag
        run: |
          git push origin :${{ github.ref }}
          echo "A job in the current workflow failed. Tag '${{ github.ref_name }}' was deleted."

  create-release:
    name: Create release
    needs: [check-release-tag, version-sanity-check, get-package-name]
    if: ${{ needs.check-release-tag.outputs.is_release_tag == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 #v2.0.8
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: true